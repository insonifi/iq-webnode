'use strict'
var React = require('react');
var Snap = require('snap');
var SVG = require('react-svg');
var Paper = require('material-ui').Paper;
var _ = require('lodash');

var ALARMED = '#ff2323';
var HOVER = '#11aaff';
var INACTIVE = '#000000';

var MapStore = require('app/stores/MapStore');

var SVGLayerList = React.createClass({
  getInitialState: function () {
    return {
      svg: Snap()
    }
  },
  displayName: 'SVGLayerList',
  componentDidMount: function () { 
    MapStore.addStateUpdateListener(this._onState);
  },
  componentWillUnmounte: function () {
    MapStore.removeStateUpdateListener(this._onState);
  },
  componentWillReceiveProps: function (props) {
  },
  componentDidUpdate: function (prevProps, prevState) {
    var prefix = this.props.prefix;
    var selected = this.props.selectedIndex;
    this.state.svg
      .selectAll('.' + prefix)
      .forEach(this._refreshStyle);
    
  },
  render: function () {
    var paperStyle = {
      display: 'inline-block',
      position: 'fixed',
      left: this.props.x,
      top: this.props.y,
      zIndex: 3,
      background: 'white'
    };
    return <Paper zDepth={3} style={paperStyle}> 
      <SVG path={this.props.src} callback={this._loadCallback} style='padding: 30px' />
    </Paper>
  },
  _loadCallback: function (svg) {
    var names = this.props.layerNames;
    var _mouseIn = this._mouseIn;
    var _mouseOut = this._mouseOut;
    var _onClick = this._onClick;
    var selected = this.props.selectedIndex;
    var prefix = this.props.prefix;
    var s = Snap(svg);
    
    _(names).forEach(function (n, key) {
      s.select('#' + prefix + key)
        .attr({
          style: '',
          stroke: HOVER,
          'stroke-width': 2,
          'stroke-opacity': 0
        })
        .addClass(prefix)
        .hover(_mouseIn, _mouseOut)
        .click(_onClick.bind(null, key))
        .selectAll('*')
          .attr({style: ''});
    }).value();
    this.setState({
      svg: s
    });
  },
    
  _mouseIn: function (e, x, y) {
    var pref_length = this.props.prefix.length;
    var prefix = this.props.prefix;
    var el_id = e.target.id;
    var layer_id = el_id.indexOf(prefix) === 0
      ? el_id.slice(pref_length)
      : Snap(e.target).parent('.' + prefix).attr('id').slice(pref_length);
    
    this.setState({hover_id: parseInt(layer_id)});
  },
    
  _mouseOut: function (e, x, y) {
    this.setState({hover_id: -1});
  },
    
  _onClick: function (key, e, x, y) {
    this.props.onChange(null, key, null);
    this.state.svg
      .circle(e.layerX, e.layerY, 0)
      .animate({
        r: 100,
        opacity: 0
      }, 300, null, function () {
        this.remove();
      });
  },
    
  _refreshStyle: function (snap) {
    var pref_length = this.props.prefix.length;
    var selected = this.props.selectedIndex;
    var hovered = this.state.hover_id;
    var key = parseInt(snap.attr('id').slice(pref_length));
    var isSelected = selected === key;
    var isHovered = hovered === key;
    var isAlarmed = this.props.alarmedList[key];
    var isVisible = isSelected || isAlarmed;
    snap
      .attr({
      })
      .animate({
        'stroke-opacity': isHovered ? 1 : 0,
        fill: isAlarmed ? ALARMED : INACTIVE,
        'fill-opacity': isSelected ? 0.6 : 0.2
      }, 100);
  },
  
  _onState: function () {
    this.setState({
      layerAlarmed: MapStore.getAlarmed()
    });
  }

});

module.exports = SVGLayerList;
